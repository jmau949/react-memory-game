{"version":3,"sources":["components/card/card.component.jsx","components/card-list/card-list.component.jsx","components/Navbar.jsx","App.js","serviceWorker.js","index.js"],"names":["Card","props","className","alt","src","monster","image","onClick","clicks","id","CardList","monsters","map","key","click","NavBar","type","data-toggle","data-target","aria-controls","aria-expanded","aria-label","href","App","handleClick","clicked","state","console","log","includes","setState","score","message","options","push","Math","floor","random","length","highscore","i","j","temp","Navbar","this","Component","Message","role","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"42BAIaA,G,MAAO,SAAAC,GAAK,OACvB,yBAAKC,UAAU,kBACb,yBACEC,IAAI,UACJC,IAAKH,EAAMI,QAAQC,MACnBC,QAAS,WAAKN,EAAMO,OAAOP,EAAMI,QAAQI,UCHlCC,G,MAAW,SAAAT,GAAK,OAC3B,yBAAKC,UAAU,aACZD,EAAMU,SAASC,KAAI,SAAAP,GAAO,OACzB,kBAAC,EAAD,CAAMQ,IAAKR,EAAQI,GAAIJ,QAASA,EAASG,OAAQP,EAAMa,c,eCe9CC,MAtBf,WAEE,OACE,6BACE,yBAAKb,UAAU,iDACb,uBAAGA,UAAU,gBAAb,uBACA,4BAAQA,UAAU,iBAAiBc,KAAK,SAASC,cAAY,WAAWC,cAAY,0BAA0BC,gBAAc,yBAAyBC,gBAAc,QAAQC,aAAW,qBACpL,0BAAMnB,UAAU,yBAGlB,yBAAKA,UAAU,2BAA2BO,GAAG,0BAC3C,wBAAIP,UAAU,sBACZ,wBAAIA,UAAU,YACZ,uBAAGA,UAAU,WAAWoB,KAAK,8BAA7B,sBCRRC,E,YACJ,aAAe,IAAD,8BACZ,+CAWFC,YAAc,SAACf,GACb,IAAIgB,EAAU,EAAKC,MAAMD,QAGzB,GAFAE,QAAQC,IAAIH,GACZE,QAAQC,IAAInB,GACRgB,EAAQI,SAASpB,GACnB,EAAKqB,SAAS,CACZL,QAAS,GACTM,MAAO,EACPC,QAAS,EAAKN,MAAMO,QAAQ,UAS9B,GALAR,EAAQS,KAAKzB,GACb,EAAKqB,SAAS,CACZC,MAAO,EAAKL,MAAMK,MAAO,EACzBC,QAAS,EAAKN,MAAMO,QAASE,KAAKC,MAAoB,EAAdD,KAAKE,aAEzB,IAAnBZ,EAAQa,OAAX,CASI,EAAKZ,MAAMK,OAAS,EAAKL,MAAMa,WACjC,EAAKT,SAAS,CAACS,UAAWd,EAAQa,SAEpC,IAAK,IAAIE,EAAI7B,EAAS2B,OAAS,EAAGE,EAAI,EAAGA,IAAK,CAC5C,IAAIC,EAAIN,KAAKC,MAAMD,KAAKE,UAAYG,EAAI,IAClCE,EAAO/B,EAAS6B,GACtB7B,EAAS6B,GAAK7B,EAAS8B,GACvB9B,EAAS8B,GAAKC,QAfd,EAAKZ,SAAS,CACZC,MAAO,EACPQ,UAAW,EACXd,QAAS,GACTO,QAAS,EAAKN,MAAMO,QAAQ,MA/BlC,EAAKP,MAAQ,CACXf,WACAoB,MAAO,EACPQ,UAAW,EACXd,QAAS,GACTO,QAAS,GACTC,QAAS,CAAC,WAAY,YAAa,QAAS,WAAY,qCAT9C,E,sEAmDZ,OACE,yBAAK/B,UAAU,OACb,kBAACyC,EAAD,MACA,6CACA,sCAAYC,KAAKlB,MAAMK,MAAvB,eAA0Ca,KAAKlB,MAAMa,WACrD,kBAAC,EAAD,CAASP,QAASY,KAAKlB,MAAMM,UAC7B,kBAAC,EAAD,CAAUrB,SAAUiC,KAAKlB,MAAMf,SAAUG,MAAO8B,KAAKpB,mB,GA1D3CqB,aAiEZC,EAAU,SAAC7C,GACb,MAAsB,qCAAlBA,EAAM+B,QAEN,6BACC/B,EAAM+B,SAAW,uBAAG9B,UAAU,qBAAqB6C,KAAK,SAAS9C,EAAM+B,UAKxE,6BACC/B,EAAM+B,SAAW,uBAAG9B,UAAU,sBAAsB6C,KAAK,SAAS9C,EAAM+B,WAKlET,IC3EKyB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.48a7a8f4.chunk.js","sourcesContent":["import React from 'react';\n\nimport './card.styles.css';\n\nexport const Card = props => (\n  <div className='card-container'>\n    <img\n      alt='monster'\n      src={props.monster.image}\n      onClick={()=>{props.clicks(props.monster.id)}}\n    />\n  </div>\n);","import React from 'react';\n\nimport { Card } from '../card/card.component';\n\nimport './card-list.styles.css';\n\nexport const CardList = props => (\n  <div className='card-list'>\n    {props.monsters.map(monster => (\n      <Card key={monster.id} monster={monster} clicks={props.click}/>\n    ))}\n  </div>\n);","import React from \"react\";\n\nfunction NavBar() {\n\n  return (\n    <div>\n      <nav className=\"navbar navbar-expand-lg navbar-light bg-light\">\n        <a className=\"navbar-brand\">Monster Memory Game</a>\n        <button className=\"navbar-toggler\" type=\"button\" data-toggle=\"collapse\" data-target=\"#navbarSupportedContent\" aria-controls=\"navbarSupportedContent\" aria-expanded=\"false\" aria-label=\"Toggle navigation\">\n          <span className=\"navbar-toggler-icon\"></span>\n        </button>\n\n        <div className=\"collapse navbar-collapse\" id=\"navbarSupportedContent\">\n          <ul className=\"navbar-nav mr-auto\">\n            <li className=\"nav-item\">\n              <a className=\"nav-link\" href=\"https://github.com/jmau949\">Git-hub Link</a>\n            </li>\n          </ul>\n        </div>\n      </nav>\n    </div>\n  );\n}\n\nexport default NavBar;","import React, { Component } from 'react';\nimport { CardList } from './components/card-list/card-list.component';\nimport './App.css';\nimport monsters from \"./monsters.json\";\nimport Navbar from './components/Navbar'\n\n\nclass App extends Component {\n  constructor() {\n    super();\n    // this.handleClick = this.handleClick.bind(this);\n    this.state = {\n      monsters,\n      score: 0,\n      highscore: 0,\n      clicked: [],\n      message: '',\n      options: ['Good one', 'Nice pick', 'Safe!', 'You Win!', 'Oops, already clicked, try again']\n    };\n  }\n  handleClick = (id) => {\n    let clicked = this.state.clicked;\n    console.log(clicked)\n    console.log(id)\n    if (clicked.includes(id)) {\n      this.setState({ \n        clicked: [], \n        score: 0,\n        message: this.state.options[4]\n      });\n      return;\n    } else {\n      clicked.push(id)\n      this.setState({\n        score: this.state.score +1,\n        message: this.state.options[(Math.floor(Math.random()*3))]\n      })\n      if(clicked.length === 8){\n        this.setState({\n          score: 0, \n          highscore: 8,\n          clicked: [],\n          message: this.state.options[3]\n        });\n        return;\n      }\n      if (this.state.score >= this.state.highscore) {\n        this.setState({highscore: clicked.length});\n      }\n      for (let i = monsters.length - 1; i > 0; i--) {\n        let j = Math.floor(Math.random() * (i + 1));\n        const temp = monsters[i];\n        monsters[i] = monsters[j];\n        monsters[j] = temp;\n      }\n    }\n  }\n\n  render() {\n    return (\n      <div className='App'>\n        <Navbar />\n        <h1>Monster Guess</h1>\n        <h4>Score: {this.state.score} Highscore: {this.state.highscore}</h4>\n        <Message message={this.state.message}/>\n        <CardList monsters={this.state.monsters} click={this.handleClick}/>\n      </div>\n    );\n  }\n}\n\n\nconst Message = (props) => {\n    if (props.message === 'Oops, already clicked, try again') {\n      return (\n        <div>\n        {props.message && <p className=\"alert alert-danger\" role=\"alert\">{props.message}</p>}\n        </div>\n      )\n    } else {\n      return (\n        <div>\n        {props.message && <p className=\"alert alert-success\" role=\"alert\">{props.message}</p>}\n        </div>\n      )\n    }\n}\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}